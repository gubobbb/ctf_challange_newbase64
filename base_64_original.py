# ฟังก์ชันนี้สร้างชุดตัวอักษร 64 ตัวแบบกำหนดเอง
def char_gen():
    # สร้างช่วงตัวอักษรภาษาไทย
    char = [chr(i) for i in range(ord('ก'), ord('ก') + 47)]
    # เพิ่มตัวเลขไทย
    char += [chr(i) for i in range(ord('๐'), ord('๐') + 10)]
    # เพิ่มตัวเลขอารบิก
    char += [chr(i) for i in range(ord('0'), ord('0') + 10)]
    # จำกัดให้เหลือเพียง 64 ตัวแรก
    char = char[:64]
    return char

# ฟังก์ชันนี้แปลงข้อความให้เป็นสตริงฐานสิบหก
def char_to_hex(msg):
    # สร้างสตริงเปล่าสำหรับเก็บผลลัพธ์
    hex_data = ''
    # วนลูปผ่านแต่ละไบต์ของข้อความ
    for c in msg.encode():
        # แปลงไบต์เป็นเลขฐานสิบหกและนำไปต่อกัน
        hex_data += hex(c)[2:]
    return hex_data

# ฟังก์ชันหลักสำหรับเข้ารหัสข้อความ
def base64_encode(msg):
    # สร้างชุดตัวอักษรที่ใช้ในการเข้ารหัส
    char = char_gen()
    # แปลงข้อความให้เป็นสตริงฐานสิบหก
    msg = char_to_hex(msg)
    # แปลงสตริงฐานสิบหกทั้งหมดให้เป็นเลขจำนวนเต็มขนาดใหญ่
    msg_num = eval('0x' + msg)
    # สร้างสตริงเปล่าสำหรับเก็บผลลัพธ์การเข้ารหัส
    base64 = ''
    # วนลูปจนกว่าค่าตัวเลขจะเหลือ 0
    while msg_num > 0:
        # คำนวณเศษที่เหลือจากการหารด้วย 64 และนำไปต่อหน้าสตริงผลลัพธ์
        base64 = char[msg_num % 64] + base64
        # หารค่าตัวเลขด้วย 64
        msg_num = msg_num // 64
    
    # เพิ่ม padding '==' ที่ส่วนท้าย
    base64 += '=='
    return base64

# รับข้อความจากผู้ใช้
msg = input('Message: ')
# เรียกใช้ฟังก์ชันเพื่อเข้ารหัสข้อความ
base64 = base64_encode(msg)
# เขียนข้อมูลที่เข้ารหัสลงในไฟล์ด้วยรูปแบบ UTF-16
open('enc.txt', 'wb').write(base64.encode('utf-16'))
  
